;;; -*- Mode: TDL; Coding: utf-8 -*-
;;; Mini-Sclera lexicon

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Nouns

;;;;;;; Pronouns

;; Nom

I := 1st-sg-pronoun-noun-lex &
  [ STEM < "I" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

you_sg_1 := 2nd-sg-pronoun-noun-lex &
  [ STEM < "you" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

you_pl_1 :=  2nd-pl-pronoun-noun-lex &
  [ STEM < "you" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

he := 3rd-sg-masc-pronoun-noun-lex &
  [ STEM < "he" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

she := 3rd-sg-fem-pronoun-noun-lex &
  [ STEM < "she" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

we := 1st-pl-pronoun-noun-lex &   ; clitic form
  [ STEM < "we" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

they := 3rd-pl-pronoun-noun-lex&
  [ STEM < "they" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

;; Acc


me := 1st-sg-pronoun-noun-lex &
  [ STEM < "me" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

him := 3rd-sg-masc-pronoun-noun-lex &
  [ STEM < "he" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

her := 3rd-sg-fem-pronoun-noun-lex &
  [ STEM < "she" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].


; you_acc :=  &

; he :=  &
; him := &
; she :=  &
; her := &

; we :=  &
; us := &
; you_pl_nom
; you_sg_acc

; they_nom
; they_acc

; my :=
;   [ STEM < "my" >,
;     SYNSEM.LOCAL.CAT.HEAD.CASE gen,
;     SYNSEM.LKEYS.KEYREL.PRED "_my_n_poss_1sg_rel" ]. ; ehhhh


;;

dog := common-noun-lex &
  [ STEM < "dog" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dog_n_rel" ].

girl := common-noun-lex &
  [ STEM < "girl" >,
    SYNSEM.LKEYS.KEYREL.PRED "_girl_n_rel" ].

kiss_1 := common-noun-lex &
  [ STEM < "kiss" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kiss_n_rel" ].

love := common-noun-lex &
  [ STEM < "love" >,
    SYNSEM.LKEYS.KEYREL.PRED "_love_n_rel" ].

couch := common-noun-lex &
  [ STEM < "couch" >,
    SYNSEM.LKEYS.KEYREL.PRED "_couch_n_rel" ].

headphones := common-noun-lex &
  [ STEM < "headphones" >,
    SYNSEM.LKEYS.KEYREL.PRED "_headphones_n_rel" ].



;flesje-water-prik := &

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Adjectives

happy := adjective-picto &
  [ STEM < "happy" >,
    SYNSEM.LKEYS.KEYREL.PRED "_happy_j_rel" ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Adverbs

yesterday := past-tense-operator-picto &
  [ STEM < "yesterday" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_yesterday_r_rel" ] ].


;;; Temporal

; yesterday := adverb-picto &



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Verbs

sleep := intrans-verb-lex &
 [ STEM < "sleep" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sleep_v_rel" ].

bark := intrans-verb-lex &
  [ STEM < "bark" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bark_v_rel" ].

buy := trans-verb-lex &
  [ STEM < "buy" >,
    SYNSEM.LKEYS.KEYREL.PRED "_buy_v_rel" ].

see := trans-verb-lex &
  [ STEM < "see" >,
    SYNSEM.LKEYS.KEYREL.PRED "_see_v_rel" ].


give_dtr := ditrans-verb-lex &
  [ STEM < "give" >,
    SYNSEM.LKEYS.KEYREL.PRED "_give_v_rel" ].

; give_tr := trans-verb-lex &
;   [ STEM < "give" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_give_v_rel" ].

brush_v := trans-verb-lex &
  [ STEM < "brush" >,
    SYNSEM.LKEYS.KEYREL.PRED "_brush_v_rel" ].

; douchen := -> een douche nemen/take+a+shower

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Pictograms encoding complex SoA's

dog_bark := complex-subj+vp-picto-lex & ; change
    [ STEM < "dog_bark" >,
      SYNSEM.LOCAL.CONT [ HOOK.SCLERA.N1 #N1,
                          RELS <! [ PRED "_bark_v_rel",
                                    ARG0 #event,
                                    ARG1 #subject ],
                                  #N1 & [ PRED "_dog_n_rel",
                                    LBL #noun,
                                    ARG0 #subject ],
                                  [ PRED "q_rel_min",
                                    ARG0 #subject,
                                    RSTR #rstr ] !>,
                          HCONS <! [ HARG #rstr ,
                                    LARG #noun ] !> ] ].

brush_dog := complex-vp-picto-lex &
  [ STEM  < "brush_dog" >,
    SYNSEM.LOCAL.CONT [ HOOK.SCLERA.N1 #N1,
                        RELS <! [ PRED "_brush_v_rel",
                                  ARG2 #object-handle ],
                                #N1 & [ PRED "_dog_n_rel",
                                        LBL  #noun,
                                        ARG0 #object-handle ],
                                [ PRED "q_rel_min",
                                  ARG0 #object-handle,
                                  RSTR #rstr ] !>,
                       HCONS <! [ HARG #rstr,
                                  LARG #noun ] !> ] ].

; go_school := complex-vp-picto-lex &
;   [ STEM < "go_school" >,
;     SYNSEM.LOCAL.CONT [ RELS <! [ PRED "_go_v_rel",
;                                   LBL  #test, ;crucial
;                                   ARG0 #verb-arg0, ; crucial
;                                   ARG2 #locative-comp ],
;                                 [ PRED "_school_n_rel",
;                                   LBL  #noun,
;                                   ARG0 #locative-comp ],
;                                 [ PRED "locative_rel",
;                                   LBL  #test, ; crucial
;                                   ARG1 #verb-arg0, ; crucial
;                                   ARG2 #locative-comp ],
;                                 [ PRED "exist_q_rel",
;                                   ARG0 #locative-comp,
;                                   RSTR #rstr ] !>,
;                        HCONS <! [ HARG #rstr,
;                                   LARG #noun ]  !> ] ].

go_school := complex-vp-picto-lex &
  [ STEM < "go_school" >,
    SYNSEM.LOCAL.CONT [ RELS <! [ PRED "_go_v_rel",
                                ;   LBL  #test, ;crucial
                                ;   ARG0 #verb-arg0, ; crucial
                                  ARG2 #locative-comp ],
                                [ PRED "_school_n_rel",
                                  LBL  #noun,     ; LARG handle
                                  ARG0 #locative-comp ],
                                [ PRED "locative_rel",
                                ;   LBL  #test, ; crucial
                                ;   ARG1 #verb-arg0, ; crucial
                                  ARG2 #locative-comp ],
                                [ PRED "exist_q_rel",
                                  ARG0 #locative-comp,
                                  RSTR #rstr ] !>, ; RSTR handle
                       HCONS <! [ HARG #rstr,
                                  LARG #noun ]  !> ] ].


;;;;;;.;;;;;;;;;;;;;;;;;;;;;;;; Auxiliaries

;;;;;; copula

; zijn :=  3rd-sg-cop-lex &
;   [ STEM < "is" > ].

;;;;;; modality

;;; deontic

; mogen :=  &   ; used for questions

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Determiners (do not exist in this grammar)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Negation
;;; (using negative adverb symbolized by 'kruis-rood')

; not :=  &
;  [ STEM < "kruis-rood" > ].

; no :=  &
;  [ STEM < "kruis-rood" > ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conjunction

en := conj-lex &
  [ STEM < "plus" >,
    SYNSEM.LKEYS.KEYREL.PRED "_and_coord_rel",
    CFORM "1" ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; experimental: interaction

;;;;; (mostly minor clause-items and idiomatic cxns)

; hey
; goeiemorgen/good+morning
; hoe-gaat-het-met-je/how+are+you
; tot-ziens/see+you

;;;;;;; ifoce operators

question := question-picto &
  [ STEM < "question" > ].
