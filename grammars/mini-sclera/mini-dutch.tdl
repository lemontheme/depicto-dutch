;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of mini-dutch-2
;;; created at:
;;;     Wed Mar 02 17:23:14 UTC 2016
;;; based on Matrix customization system version of:
;;;     Sun Jan 10 22:56:48 UTC 2016
;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ AUX bool,
          FORM form ].

noun :+ [ CASE case ].


;is this necessary?
; +nvcdmo :+ [ MOD < > ].

inflected :+ [ PERNUM-FLAG luk,
               NUM-FLAG luk,
               ADJ-INFLECTION-FLAG luk ].

infl-satisfied :+ [ FINITE-SUFFIX-FLAG na-or-+,
                    ADJ-INFLECTION-FLAG na-or-+,
                    WH-FLAG luk ].

png :+ [ PER person,
         NUM number,
         GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; For the analysis of inverted yes-no questions, we add the feature INV.

verb :+ [ INV bool ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nominative
acc := case.  ; accusative

;;; Person

person := *top*.
non-1st := person.
1st := person.
2nd := non-1st.
3rd := non-1st.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Gender

gender := *top*.
neuter := gender.
non-neuter := gender.
masculine := non-neuter.
feminine := non-neuter.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

past := tense.
non-past := tense.
future := non-past.
present := non-past.

;;; Aspect

perfective := aspect.
imperfective := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

obl-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT - ] > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].


; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
;
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

common-noun-lex := obl-spr-noun-lex.

1st-sg-pronoun-noun-lex := no-spr-noun-lex &
 [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                      NUM singular ] ].

2nd-sg-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM singular ]].


femmasc-count-sg-noun-lex := obl-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND non-neuter,
                                       NUM singular,
                                       PER 3rd ] ].

neutr-count-sg-noun-lex := obl-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND neuter,
                                       NUM singular,
                                       PER 3rd ] ].

fem-masc-count-pl-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND non-neuter,
                                       NUM plural,
                                       PER 3rd ] ].

neutr-count-pl-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND neuter,
                                       NUM plural,
                                       PER 3rd ] ].

fem-mass-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND non-neuter,
                                       NUM singular,
                                       PER 3rd ] ].

neutr-mass-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND neuter,
                                       NUM singular,
                                       PER 3rd ] ].




;;; Verbs

verb-lex := lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ],
    INFLECTED.PERNUM-FLAG - ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

ditransitive-verb-lex := main-verb-lex & ditransitive-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comp1 &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ],
             #comp2 &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    SYNSEM.LOCAL.CAT [ VAL.COMPS < #comp1,
                                   #comp2 > ] ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

nom-acc-acc-ditransitive-verb-lex := ditransitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

intrans-verb-lex := nom-intransitive-verb-lex.
trans-verb-lex := nom-acc-transitive-verb-lex.



intrans-3rd-sg-verb-lex := nom-intransitive-verb-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE non-past,
                   CAT [ VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                    NUM singular ],
                         HEAD.FORM finite ] ] ].

trans-3rd-sg-verb-lex := nom-acc-transitive-verb-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE non-past,
                   CAT [ VAL [ COMPS.FIRST.OPT -,
                               SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                      NUM singular ] ],
                         HEAD.FORM finite ] ] ].

ditrans-3rd-sg-verb-lex := nom-acc-acc-ditransitive-verb-lex &
  [ ARG-ST < [ ],
             [ ],
             [ OPT - ] >,
    SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE non-past,
                   CAT [ VAL [ COMPS.FIRST.OPT -,
                               SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                      NUM singular ] ],
                         HEAD.FORM finite ] ] ].

;;;; Auxiliaries
;
;arg-comp-aux := aux-lex & basic-two-arg &
;  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
;                             SPEC < >,
;                             COMPS < #comps . #vcomps >,
;                             SUBJ < #subj > ],
;                   CONT.HOOK.XARG #xarg ],
;    ARG-ST < #subj &
;             [ LOCAL [ CAT [ HEAD noun &
;                                  [ CASE #case ],
;                             VAL [ SUBJ < >,
;                                   SPR < >,
;                                   SPEC < >,
;                                   COMPS < > ] ],
;                       CONT.HOOK.INDEX #xarg ] ],
;             #comps &
;             [ LIGHT +,
;               LOCAL [ CONT.HOOK.XARG #xarg,
;                       CAT [ HEAD verb,
;                             VAL [ COMPS #vcomps,
;                                   SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] ] > ].
;
;; Somewhat surprisingly, this inherits from basic-two-arg, so
;; that the non-local features are amalgamated from subj, the
;; lexical verb complement, but not the other complements, if any.
;
;; Note that raise-sem-lex-item assumes the first complement is
;; where the HOOK comes from.  It's not clear to me how you'd
;; tell that you had an argument composition auxiliary if it
;; wasn't appearing adjacent to the verb.
;
;; To keep the semantically empty ones from spinning on
;; generation, require complement to be [AUX -].  The
;; FORM feature might be enough in the starter grammars,
;; but I don't want to rely on this.  Then again, [ AUX - ]
;; might not be true.
;
;arg-comp-aux-no-pred := arg-comp-aux & raise-sem-lex-item &
;  [ ARG-ST < [ ],
;             [ LOCAL.CAT.HEAD.AUX - ] > ].
;
;aux-lex-aux-lex := arg-comp-aux-no-pred &
;  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].


;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

definite-determiner-lex := determiner-lex & no-icons-lex-item.
indefinite-determiner-lex := determiner-lex & no-icons-lex-item.

;;;;;;;;;;;;;;;;;;;
;;; LEXICAL RULES
;;;;;;;;;;;;;;;;;;;


;; Adjective Incorporation
;
;adj_incorporation-lex-rule := add-only-rule &
;  [ C-CONT [ RELS <! arg1-ev-relation &
;                     [ LBL #ltop,
;                       ARG1 #index ] !>,
;             HOOK #hook ],
;    DTR.SYNSEM.LOCAL [ CAT.HEAD noun,
;                       CONT.HOOK #hook &
;                                 [ LTOP #ltop,
;                                   INDEX #index ] ] ].


;;;; Lexical rule types

num-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ NUM-FLAG +,
                PERNUM-FLAG #pernum ],
    DTR common-noun-lex &
        [ INFLECTED.PERNUM-FLAG #pernum ] ].

singular-lex-rule := const-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

plural-lex-rule := infl-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

;

pernum-lex-rule-super := add-only-no-ccont-rule &
   [ INFLECTED [ PERNUM-FLAG +,
                 NUM-FLAG #num ],
     DTR verb-lex &
          [ INFLECTED.NUM-FLAG #num ] ].

finite-lex-rule := pernum-lex-rule-super &
   [ SYNSEM.LOCAL.CAT.HEAD.FORM finite ].

3sg-lex-rule := infl-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM singular ] ].

pl-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].


;; Rule for inverted subject verb order in questions.
;; The incompatible SUBJ values on SYNSEM and DTR are
;; what keeps this one from spinning.

subj-v-inv-lrule := cat-change-only-lex-rule & same-hc-light-lex-rule & same-posthead-lex-rule & constant-lex-rule &
  [ SYNSEM [ LKEYS #lkeys,
             LOCAL.CAT [ VAL [ COMPS < #subj . #comps >,
                               SUBJ < >,
                               SPR #spr,
                               SPEC #spec ],
                         MC na,
                         HEAD verb &
                              [ INV +,
                                FORM #form ] ] ],
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL.CAT [ VAL [ SUBJ < #subj >,
                                   COMPS #comps,
                                   SPR #spr,
                                   SPEC #spec ],
                             HEAD verb &
                                  [ FORM #form ] ] ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;


; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

;head-spec-phrase := basic-head-spec-phrase & head-final.

; <imported from mini-eng>... (See also nederlands.tdl (fokkens, new))
head-spec-phrase := basic-head-spec-phrase & head-final &
[ NON-HEAD-DTR.SYNSEM.OPT - ].
; ...</>


;; Constraint on MC used to be part of matrix.tdl
;; it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
[ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].


; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; This rule takes [MC na] inverted phrases and licenses them as main clauses with question semantics.
;

;int-cl := interrogative-clause & head-only &
;  [ SYNSEM.LOCAL.CAT [ HEAD.INV +,
;                       VAL #val,
;                       MC + ],
;    HEAD-DTR.SYNSEM.LOCAL.CAT [ MC na,
;                                VAL #val &
;                                    [ SUBJ < >,
;                                      COMPS < > ] ],
;    C-CONT.HOOK.INDEX.SF ques ].





;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

;n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;;;; Coordination Strategy 1
;
;np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;;;; Coordination Strategy 1
;
;vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;;;; Coordination Strategy 1

;s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
;
;s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
;  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
