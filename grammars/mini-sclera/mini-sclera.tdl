;;; -*- Mode: TDL; Coding: utf-8 -*-

;; head types

complex-picto := head &
  [ COMPLEX + ].

complex-S-picto := complex-picto & verb.
complex-VP-picto := complex-picto & verb.

; complex-picto :+ [ SCLERA sclera-hooks ].

sclera-hook := hook &
 [ SCLERA sclera-hooks ].

; sclera-hooks := avm &
;   [ N1 ref-ind,
;     N2 ref-ind,
;     V1 event,
;     V2 event ].

sclera-hooks := avm &
  [ N1 noun-relation,
    N2 avm,
    V1 avm,
    V2 avm ].

;;;


;;; complex S-V pictos

;;; lexical types

complex-picto-lex := lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK sclera-hook,
                   CAT [ HEAD complex-picto ] ] ].

main-complex-v-picto-lex := complex-picto-lex &
  [ SYNSEM.LOCAL [ CAT [ VAL  [ SPR < >,
                                SPEC < >,
                                COMPS < > ] ] ] ].
    ; SYNSEM.LKEYS.KEYREL event-relation ].

; e.g. "brush_dog"
; Rest is taken care of by subject-head rule
complex-vp-picto-lex := main-complex-v-picto-lex &
  [ SYNSEM.LOCAL [ CAT  [ HEAD complex-VP-picto,
                          VAL.SUBJ < #subject > ],
                   CONT [ HOOK [ LTOP #lbl_head,
                                 INDEX #event,
                                 XARG  #xarg-subj ], ; optional
                          RELS.LIST.FIRST [ LBL #lbl_head,
                                            ARG0 event & #event,
                                            ARG1 #xarg-subj ] ] ],
    ARG-ST.FIRST #subject &
                 [ LOCAL [ CAT [ HEAD noun,
                                 VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg-subj ] ] ].

; e.g. "dog_bark"
complex-subj+vp-picto-lex := main-complex-v-picto-lex &
  [ SYNSEM.LOCAL [ CAT  [ HEAD complex-S-picto,
                          VAL.SUBJ < >,
                          MC - ],
                   CONT [ HOOK [ LTOP #lbl_head,
                                 INDEX #event],
                          RELS.LIST.FIRST [ ARG0 event & #event,
                                            LBL #lbl_head ] ] ] ].

; complex-subj+vp-picto-lex :+ "all-in-one cannonball of expression".

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; rules

; e.g. "dog_bark" -> "the dog barks"
complex-subj+vp-picto-rule := head-only & declarative-clause &
  [ SYNSEM.LOCAL.CAT [ HEAD complex-S-picto,
                       VAL [ SPR < >,
			                 SUBJ < >,
			                 COMPS < >,
			                 SPEC < > ],
                       MC + ],
    SYNSEM.LOCAL.CONT.HOOK #hook,
    HEAD-DTR lex-item & [ SYNSEM.LOCAL [ CONT.HOOK #hook,
                                         CAT [ HEAD complex-S-picto,
                    				           VAL [ SPR < >,
                    					             SUBJ < >,
                    					             COMPS < > ],
                                               MC - ] ] ],
    C-CONT.RELS <! !> ].

; based on basic-bare-np-phrase (matrix.tdl, 2055)
; e.g. { dog_n_rel(x) } => { DET(d, x) dog_n_rel(x)}
sclera-basic-insert-definite-det-rule := head-only &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
			               SUBJ < >,
                		   COMPS < >,
            			   SPEC < > ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD noun,
                				  VAL [ SPR < [ LOCAL.CAT.HEAD det,
                        						OPT - ] >,
                    					SUBJ < >,
                    					COMPS < > ] ],
            			    CONT.HOOK [ INDEX #index,
            					        LTOP #larg ] ],
    C-CONT [ RELS <! quant-relation &
              [ PRED "q_rel_min",
		        ARG0 #index,
		        RSTR #harg ] !>,
	         HCONS <! qeq &
		      [ HARG #harg,
		        LARG #larg ] !>,
	         ICONS <! !>,
	         HOOK [ INDEX #index,
                    LTOP #larg ] ] ]. ; added ltop identity

sclera-bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; experiment with open-ended lists: < ... >
; experiment with dotted pair list: < a, b . rest >
; delete


; hook :+ [ SCLERA sclera-hooks ].

; some-test-start := phrase &
;   [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
;                            COMPS < > ],
;     SYNSEM.LOCAL.CONT [ TEMP-RELS-REST #rels ],
;     ARGS < [ SYNSEM.LOCAL.CONT.RELS.LIST #rels ] > ].
;
; some-test-loop := phrase &
;   [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
;                            COMPS < > ],
;     SYNSEM.LOCAL.CONT [ TEMP-RELS-FIRST #first,
;                         TEMP-RELS-REST #rest ],
;     ARGS < [ SYNSEM.LOCAL.CONT.TEMP-RELS-REST [ FIRST #first,
;                                                 REST  #rest & cons ] ] > ].

; some-test-loop := phrase &
;   [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
;                            COMPS < > ],
;     SYNSEM.LOCAL.CONT [ TEMP-REL #first,
;                         RELS [ LIST #rest,
;                                LAST #last ] ],
;     ARGS < [ SYNSEM.LOCAL.CONT.RELS [ LIST [ FIRST #first,
;                                              REST  #rest ],
;                                       LAST #last ] ] > ].

                                    ;   LAST  ] ] > ].

; check-noun :=
;   [ ARGS < [] > ].

; test-picto := lex-item &
;   [ SYNSEM.LOCAL.CAT.HEAD complex-picto,
;     SYNSEM.LOCAL.CONT.RELS <! "a", "b", "c" !> ].


; adjective-picto := basic-intersective-adjective-lex & no-hcons-lex-item &
;   [ INFLECTED.ADJ-INFLECTION-FLAG na ].

; attr-adjective-picto := adjective-picto &
;   [ SYNSEM.LOCAL.CAT [ HEAD adj & [ MOD < [ LOCAL [ CAT [ VAL [ SPR < >,
;                                                                 COMPS < >,
;                                                                 SUBJ < > ] ],
;                                                     CONT.HOOK [ INDEX #index,
;                                                                 LTOP #ltop ] ] ] > ],
;                        VAL [ COMPS < > ] ],
;     SYNSEM.LOCAL.CONT.RELS.LIST.FIRST [ ARG1 #index,
;                                         LBL #ltop ] ].

adjective-picto := basic-intersective-adjective-lex & no-hcons-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD adj & [ MOD < [ LOCAL [ CAT [ VAL [ SPR < >,
                                                                COMPS < >,
                                                                SUBJ < > ] ],
                                                    CONT.HOOK [ INDEX #index,
                                                                LTOP #ltop ] ] ] > ],
                       VAL [ COMPS < >,
                             SUBJ < > ] ],
    SYNSEM.LOCAL.CONT.RELS.LIST.FIRST [ ARG1 #index,
                                        LBL #ltop ] ].


sclera-adjective-noun-phrase := basic-head-mod-phrase-simple &
  [ NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD adj,
                                      VAL.SPR cons,
                                      VAL.COMPS #comps ],
                                CONT.RELS.LIST.FIRST [ ARG1 #index,
                                                       LBL #ltop  ] ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD noun,
                                VAL [ SUBJ #subj,
                                      SPEC #spec,
                                      SPR < > ] ],
                            CONT.HOOK [ INDEX #index,
                                        LTOP  #ltop ] ],
    SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                           SUBJ #subj,
                           SPEC #spec ] ].

sclera-adj-int-noun-phrase := sclera-adjective-noun-phrase & adj-head-int-phrase.

; sclera-adjective-NP1-in-complex-picto-phrase := head-mod-phrase &
;   [ SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
;                            SUBJ #subj,
;                            SPEC #spec ],
;     NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD adj,
;                                       VAL.COMPS #comps ],
;                                 CONT.RELS.LIST.FIRST [ ARG1 #index,
;                                                        LBL #ltop ] ],
;     HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD complex-picto,
;                                   VAL [ SUBJ #subj,
;                                         SPR < >,
;                                         SPEC #spec ] ],
;                             CONT.HOOK.SCLERA.N1 [ ARG0 #index,
;                                                   LBL #ltop ] ] ].

; same as above sans isect-mod-phrase
sclera-adjective-NP1-in-complex-picto-phrase := basic-binary-headed-phrase & declarative-clause &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                           SUBJ #subj,
                           SPEC #spec ],
    SYNSEM.LOCAL.CAT.MC -,
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD adj,
                                      VAL.COMPS #comps ],
                                CONT.RELS.LIST.FIRST [ ARG1 #index,
                                                       LBL #ltop ] ],
    HEAD-DTR lex-item &
     [ SYNSEM.LOCAL [ CAT [ HEAD complex-picto,
                                  VAL [ SUBJ #subj,
                                        SPR < >,
                                        SPEC #spec ] ],
                            CONT.HOOK.SCLERA.N1 [ ARG0 #index,
                                                  LBL #ltop ] ] ],
    C-CONT.RELS <! !> ].

slera-adj-int-NP-complex-N1-phrase := head-final & head-compositional &
   sclera-adjective-NP1-in-complex-picto-phrase.


;;; Adverbs

; +vjr = Ddisjunctive type for verbs, adjectives and adverbs (in
; head-types.tdl)
; ... MOD < [LOCAL.CAT.HEAD +vjr ...
adverb-picto := basic-int-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.MOD < [ ] >,
                       VAL [ SUBJ < >,
                             COMPS < >,
                             SPEC < >,
                             SPR < > ],
                       POSTHEAD - ] ].

temporal-operator-picto := adverb-picto &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL.SUBJ < > ] ] > ] ].

past-tense-operator-picto := temporal-operator-picto &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

temp-adverb-verb-phrase := basic-head-mod-phrase-simple &
                                head-initial & isect-mod-phrase &
  [ C-CONT.HOOK #hook & [ INDEX.E.TENSE #tense ],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD adv,
                                CONT.HOOK.INDEX.E.TENSE #tense ],
    HEAD-DTR.SYNSEM.LOCAL [ CONT.HOOK #hook,
                            CAT.MC + ] ].

;;

; illocutionary operator

operator := head.
iforce-mod := operator.
ques-mod := iforce-mod.

iforce-picto := no-rels-hcons-lex-item  &
  [ SYNSEM.LOCAL.CAT [ HEAD iforce-mod,
                       VAL [ SUBJ < >,
                             COMPS < >,
                             SPR < > ] ] ].

question-picto := iforce-picto &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL [ SUBJ < >,
                                                      COMPS < > ] ] ] >,
                   CONT.HOOK.INDEX.SF ques ] ].

modify-illocution-phrase := basic-head-mod-phrase-simple &
                                head-initial & head-compositional &
  [ C-CONT [ HOOK.INDEX.SF #illocution,
             RELS <! !> ],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD ques-mod,
                                CONT.HOOK.INDEX.SF #illocution ] ].
