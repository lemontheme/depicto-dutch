;;; -*- Mode: TDL; Coding: utf-8 -*-

;;; Nouns

;; Pronouns

;; nominative

ik := 1st-sg-pronoun-noun-lex &
  [ STEM < "ik" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

je_1 := 2nd-sg-pronoun-noun-lex &
  [ STEM < "je" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

hij := 3rd-sg-masc-pronoun-noun-lex&
  [ STEM < "hij" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

zij_sg := 3rd-sg-fem-pronoun-noun-lex&
  [ STEM < "zij" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

we_clit := 1st-pl-pronoun-noun-lex &   ; clitic form
  [ STEM < "we" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

wij_nclit := 1st-pl-pronoun-noun-lex & ; non-clitic form
  [ STEM < "wij" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].


jullie_1 := 2nd-pl-pronoun-noun-lex &
  [ STEM < "jullie" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].


zij_pl := 3rd-pl-pronoun-noun-lex&
  [ STEM < "zij" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

;; accusative

me_1 := 1st-sg-pronoun-noun-lex &
  [ STEM < "me" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

jou_1 := 2nd-sg-pronoun-noun-lex &
  [ STEM < "jou" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

hem := 3rd-sg-masc-pronoun-noun-lex &
  [ STEM < "zij" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

haar_obj := 3rd-sg-masc-pronoun-noun-lex &
  [ STEM < "haar" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

ze_pl_obj := 3rd-pl-pronoun-noun-lex&
  [ STEM < "zij" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

hen_pl_obj := 3rd-pl-pronoun-noun-lex & ; accusative only!
  [ STEM < "hen" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

jullie_2 := 2nd-pl-pronoun-noun-lex &
  [ STEM < "jullie" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

;

hond := femmasc-count-sg-noun-lex &
  [ STEM < "hond" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hond_n_rel" ].

honden := femmasc-count-pl-noun-lex &
  [ STEM < "honden" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hond_n_rel" ].

meisje := neutr-count-sg-noun-lex &
  [ STEM < "meisje" >,
    SYNSEM.LKEYS.KEYREL.PRED "_meisje_n_rel" ].

meisjes := neutr-count-pl-noun-lex &
  [ STEM < "meisjes" >,
    SYNSEM.LKEYS.KEYREL.PRED "_meisje_n_rel" ].

liefde := no-spr-noun-lex &
  [ STEM < "liefde" >,
    SYNSEM.LKEYS.KEYREL.PRED "_liefde_n_rel" ].

kusje := neutr-count-sg-noun-lex &
  [ STEM < "kusje" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kus_n_rel" ].

kusjes := neutr-count-pl-noun-lex &
  [ STEM < "kusjes" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kus_n_rel" ].

school := no-spr-noun-lex &
  [ STEM < "school" >,
    SYNSEM.LKEYS.KEYREL.PRED "_school_n_rel" ].

zetel_sg := femmasc-count-sg-noun-lex &
  [ STEM < "zetel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_zetel_n_rel" ].

zetel_pl := femmasc-count-pl-noun-lex &
  [ STEM < "zetels" >,
    SYNSEM.LKEYS.KEYREL.PRED "_zetel_n_rel" ].

koptelefoon_sg := femmasc-count-sg-noun-lex &
  [ STEM < "koptelefoon" >,
    SYNSEM.LKEYS.KEYREL.PRED "_koptelefoon_n_rel" ].

;;; Adjectives

;;; Verbs


blaf := intrans-1st-sg-verb-lex &
  [ STEM < "blaf" >,
    SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].

blaft := intrans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "blaft" >,
    SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].

blaffen := intrans-pl-verb-lex &
 [ STEM < "blaffen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].

blafte := intrans-sg-preterite-lex &
 [ STEM < "blafte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].
blaften := intrans-pl-preterite-lex &
 [ STEM < "blaften" >,
   SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].

slaap := intrans-1st-sg-verb-lex &
 [ STEM < "slaap" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].

slaapt := intrans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "slaapt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].

slapen := intrans-pl-verb-lex &
 [ STEM < "slapen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].

sliep := intrans-sg-preterite-lex &
 [ STEM < "sliep" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].

sliepen := intrans-pl-preterite-lex &
 [ STEM < "sliepen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].


;

koop := trans-1st-sg-verb-lex &
  [ STEM < "koop" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kopen_v_rel" ].

koopt := trans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "koopt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kopen_v_rel" ].

kopen := trans-pl-verb-lex &
  [ STEM < "kopen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kopen_v_rel" ].

kocht := trans-sg-preterite-lex &
  [ STEM < "kocht" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kopen_v_rel" ].

kochten := trans-pl-preterite-lex &
  [ STEM < "kochten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kopen_v_rel" ].
;

; geef_tr := trans-1st-sg-verb-lex &
;   [ STEM < "geef" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].
;
; geeft_tr := trans-2nd-or-3rd-sg-verb-lex &
;   [ STEM < "geeft" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].
;
; geven_tr := trans-pl-verb-lex &
;   [ STEM < "geven" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

geef_dtr := ditrans-1st-sg-verb-lex &
  [ STEM < "geef" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

geeft_dtr := ditrans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "geeft" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

geven_dtr := ditrans-pl-verb-lex &
  [ STEM < "geven" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

gaf_dtr := ditrans-sg-preterite-lex &
  [ STEM < "gaf" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

gaven_dtr := ditrans-pl-preterite-lex &
  [ STEM < "gaven" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

;

borstel := trans-1st-sg-verb-lex &
  [ STEM < "borstel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

borstelt := trans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "borstelt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

borstelen := trans-pl-verb-lex &
  [ STEM < "borstelen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

borstelde := trans-sg-preterite-lex &
[ STEM < "borstelde" >,
  SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

borstelden := trans-pl-preterite-lex &
[ STEM < "borstelden" >,
  SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].


kam := trans-1st-sg-verb-lex &
  [ STEM < "kam" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

kamt := trans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "kamt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

kammen := trans-pl-verb-lex &
  [ STEM < "kammen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

wandel := intrans+pp-1st-sg-verb-lex  &
  [ STEM < "wandel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_wandelen_v_rel" ].
wandelt := intrans+pp-2nd-or-3rd-sg-verb-lex &
  [ STEM < "wandelt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_wandelen_v_rel" ].
wandelen := intrans+pp-pl-verb-lex &
  [ STEM < "wandelen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_wandelen_v_rel" ].

ga := intrans+pp-1st-sg-verb-lex  &
  [ STEM < "ga" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gaan_v_rel" ].

gaat := intrans+pp-2nd-or-3rd-sg-verb-lex &
  [ STEM < "gaat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gaan_v_rel" ].

gaan := intrans+pp-pl-verb-lex &
  [ STEM < "gaan" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gaan_v_rel" ].

ging := intrans+pp-sg-preterite-lex &
[ STEM < "ging" >,
  SYNSEM.LKEYS.KEYREL.PRED "_gaan_v_rel" ].

gingen := intrans+pp-pl-preterite-lex &
[ STEM < "gingen" >,
  SYNSEM.LKEYS.KEYREL.PRED "_gaan_v_rel" ].

zie := trans-1st-sg-verb-lex &
  [ STEM < "zie" >,
    SYNSEM.LKEYS.KEYREL.PRED "_zien_v_rel" ].

ziet := trans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "ziet" >,
    SYNSEM.LKEYS.KEYREL.PRED "_zien_v_rel" ].

zien := trans-pl-verb-lex &
  [ STEM < "zien" >,
    SYNSEM.LKEYS.KEYREL.PRED "_zien_v_rel" ].

zag := trans-sg-preterite-lex &
  [ STEM < "zag" >,
    SYNSEM.LKEYS.KEYREL.PRED "_zien_v_rel" ].

zagen := trans-pl-preterite-lex &
  [ STEM < "zagen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_zien_v_rel" ].


;;; Prepositions

naar_p := prep-lex-item &
  [ STEM < "naar" >,
    SYNSEM.LKEYS.KEYREL.PRED "naar_p_rel" ].

aan_1 := dative-comp-prep-lex &
  [ STEM < "aan" >,
    SYNSEM.LKEYS.KEYREL.PRED "aan_p_rel" ].

;;; Auxiliaries

;is :=  3rd-sg-cop-lex &
;  [ STEM < "is" > ].

;;; Adjectives


blij := adjective-lex &
  [ STEM < "blij" >,
    SYNSEM.LKEYS.KEYREL.PRED "_blij_j_rel" ].

;;; Adverbs

gisteren := adverb-lex &
  [ STEM < "gisteren" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gisteren_r_rel" ].

;;; Determiners

de_sg := definite-determiner-lex &
  [ STEM < "de" >,
    SYNSEM [ LKEYS.KEYREL.PRED def_q_rel, ;"_def_q_rel"
             LOCAL.CONT.HOOK.INDEX.PNG [ GEND non-neuter,
                                         NUM  singular ] ] ] .

de_pl := definite-determiner-lex &
  [ STEM < "de" >,
    SYNSEM [ LKEYS.KEYREL.PRED def_q_rel, ;"_def_q_rel"
             LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural ] ] ] .

het := definite-determiner-lex &
  [ STEM < "het" >,
    SYNSEM [ LKEYS.KEYREL.PRED def_q_rel,
             LOCAL.CONT.HOOK.INDEX.PNG [ GEND neuter,
                                         NUM singular] ] ] .

een := indefinite-determiner-lex &
  [ STEM < "een" >,
    SYNSEM [ LKEYS.KEYREL.PRED indef_q_rel,
             LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular ] ] ]. ;"_indef_q_rel"

; hack to produce bare NPs
; zero_det := indefinite-determiner-lex;

en := conj-lex &
  [ STEM < "en" >,
    SYNSEM.LKEYS.KEYREL.PRED "_and_coord_rel",
    CFORM "1" ].

;;; Punctuation

period-punct := punctuation-sign &
  [ STEM < "." >,
    SYNSEM.LOCAL.CAT.HEAD.FORM period ].
