;;; -*- Mode: TDL; Coding: utf-8 -*-

;;; Nouns

;; Pronouns

;; nominative

ik := 1st-sg-pronoun-noun-lex &
  [ STEM < "ik" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

me_1 := 1st-sg-pronoun-noun-lex &
  [ STEM < "me" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

je_1 := 2nd-sg-pronoun-noun-lex &
  [ STEM < "je" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

;; accusative

; jou :=  &
;

; hij :=  &
; zij :=  &

; wij :=  &

jullie_1 := 2nd-pl-pronoun-noun-lex &
  [ STEM < "jullie" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LKEYS.KEYREL.PRED "_pronoun_n_rel" ].

; zij


hond := femmasc-count-sg-noun-lex &
  [ STEM < "hond" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hond_n_rel" ].

honden := femmasc-count-pl-noun-lex &
  [ STEM < "honden" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hond_n_rel" ].


meisje := neutr-count-sg-noun-lex &
  [ STEM < "meisje" >,
    SYNSEM.LKEYS.KEYREL.PRED "_meisje_n_rel" ].

meisjes := neutr-count-pl-noun-lex &
  [ STEM < "meisjes" >,
    SYNSEM.LKEYS.KEYREL.PRED "_meisje_n_rel" ].

liefde := no-spr-noun-lex &
  [ STEM < "liefde" >,
    SYNSEM.LKEYS.KEYREL.PRED "_liefde_n_rel" ].

kusje := neutr-count-sg-noun-lex &
  [ STEM < "kusje" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kus_n_rel" ].

kusjes := neutr-count-pl-noun-lex &
  [ STEM < "kusjes" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kus_n_rel" ].



;;; Adjectives

;;; Verbs


blaf := intrans-1st-sg-verb-lex &
  [ STEM < "blaf" >,
    SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].

blaft := intrans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "blaft" >,
    SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].

blaffen := intrans-pl-verb-lex &
 [ STEM < "blaffen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].

;blaf := intrans-verb-lex &
;  [ STEM < "blaf" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_blaffen_v_rel" ].

;slapen := intrans-verb-lex &
;  [ STEM < "slaap" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].

slaap := intrans-1st-sg-verb-lex &
 [ STEM < "slaap" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].

slaapt := intrans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "slaapt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].

slapen := intrans-pl-verb-lex &
 [ STEM < "slapen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slapen_v_rel" ].

;

koop := trans-1st-sg-verb-lex &
  [ STEM < "koop" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kopen_v_rel" ].

koopt := trans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "koopt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kopen_v_rel" ].

kopen := trans-pl-verb-lex &
  [ STEM < "kopen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kopen_v_rel" ].

;

geeft_tr := trans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "geeft" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

geven_tr := trans-pl-verb-lex &
  [ STEM < "geven" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

geeft_dtr := ditrans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "geeft" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

geven_dtr := ditrans-pl-verb-lex &
  [ STEM < "geven" >,
    SYNSEM.LKEYS.KEYREL.PRED "_geven_v_rel" ].

;

borstel := trans-1st-sg-verb-lex &
  [ STEM < "borstel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

borstelt := trans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "borstelt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

borstelen := trans-pl-verb-lex &
  [ STEM < "borstelen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

kam := trans-1st-sg-verb-lex &
  [ STEM < "kam" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

kamt := trans-2nd-or-3rd-sg-verb-lex &
  [ STEM < "kamt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].

kammen := trans-pl-verb-lex &
  [ STEM < "kammen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_borstelen_v_rel" ].



;;; Auxiliaries

;is :=  3rd-sg-cop-lex &
;  [ STEM < "is" > ].

;;; Determiners

de_sg := definite-determiner-lex &
  [ STEM < "de" >,
    SYNSEM [ LKEYS.KEYREL.PRED def_q_rel, ;"_def_q_rel"
             LOCAL.CONT.HOOK.INDEX.PNG [ GEND non-neuter,
                                         NUM  singular ] ] ] .

de_pl := definite-determiner-lex &
  [ STEM < "de" >,
    SYNSEM [ LKEYS.KEYREL.PRED def_q_rel, ;"_def_q_rel"
             LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural ] ] ] .

het := definite-determiner-lex &
  [ STEM < "het" >,
    SYNSEM [ LKEYS.KEYREL.PRED def_q_rel,
             LOCAL.CONT.HOOK.INDEX.PNG [ GEND neuter,
                                         NUM singular] ] ] .

een := indefinite-determiner-lex &
  [ STEM < "een" >,
    SYNSEM [ LKEYS.KEYREL.PRED indef_q_rel,
             LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular ] ] ]. ;"_indef_q_rel"

; hack to produce bare NPs
; zero_det := indefinite-determiner-lex;

en := conj-lex &
  [ STEM < "en" >,
    SYNSEM.LKEYS.KEYREL.PRED "_and_coord_rel",
    CFORM "1" ].
