;; in matrix.tdl
headed-phrase := phrase &
  [ SYNSEM.LOCAL [ CAT.HEAD head & #head,
                   AGR #agr,
                   COORD -,
                   COORD-REL #crel ],
    C-CONT.HOOK.ICONS-KEY #icons,
    HEAD-DTR.SYNSEM.LOCAL local &
		 [ CAT.HEAD #head,
		   CONT.HOOK.ICONS-KEY #icons,
		   AGR #agr,
		   COORD -,
		   COORD-REL #crel ] ].

basic-binary-phrase := phrase &
  [ SYNSEM.LOCAL.CONT [ RELS [ LIST #first,
			       LAST #last ],
			HCONS [ LIST #scfirst,
				LAST #sclast ],
			ICONS [ LIST #icfirst,
				LAST #iclast ] ],
    C-CONT [ RELS [ LIST #middle2,
		    LAST #last ],
	     HCONS [ LIST #scmiddle2,
		     LAST #sclast ],
	     ICONS [ LIST #icmiddle2,
		     LAST #iclast ] ],
    ARGS < sign & [ SYNSEM.LOCAL local &
				 [ CONT [ RELS [ LIST #first,
						 LAST #middle1 ],
					  HCONS [ LIST #scfirst,
						  LAST #scmiddle1 ],
					  ICONS [ LIST #icfirst,
						  LAST #icmiddle1 ] ] ] ],
	   sign & [ SYNSEM.LOCAL local &
				 [ CONT [ RELS [ LIST #middle1,
						 LAST #middle2 ],
					  HCONS [ LIST #scmiddle1,
						  LAST #scmiddle2 ],
					  ICONS [ LIST #icmiddle1,
						  LAST #icmiddle2 ] ] ] ] > ].


basic-binary-headed-phrase := headed-phrase & basic-binary-phrase &
  [ NON-HEAD-DTR sign & [ SYNSEM.LOCAL.COORD - ] ].

binary-headed-phrase := basic-binary-headed-phrase & binary-phrase.


basic-head-final := basic-binary-headed-phrase &
  [ HEAD-DTR #head,
    NON-HEAD-DTR #non-head,
    ARGS < #non-head, #head > ].


head-final := basic-head-final & binary-headed-phrase.

;;
;; in nederlands.tdl
basic-head-spec-phrase := head-valence-phrase & phrasal &
			  binary-headed-phrase &
  [ INFLECTED infl-satisfied,
    SYNSEM [ LOCAL.CAT [ VAL [ SUBJ #subj,
                               COMPS #spcomps,
                               SPR #spr,
                               SPEC #spec ],
			 POSTHEAD #ph,
			 HC-LIGHT - ],
	      MODIFIED #modif ],
    HEAD-DTR [ INFLECTED infl-satisfied,
               SYNSEM [ LOCAL [ CAT [ HEAD #head,
		                      VAL [ SUBJ #subj,
					    COMPS olist & #comps,
                        SPR < #synsem &  canonical-synsem . #spr >,
					    SPEC #spec ],
                        POSTHEAD #ph ],
				CONT.HOOK #hdhook ],
			MODIFIED #hmodif ] ],
    NON-HEAD-DTR.SYNSEM #synsem &
	 [ LOCAL [ CAT [ VAL [ SPEC < [ LOCAL [ CAT [ HEAD #head,
	                                              VAL.COMPS #comps ],
						CONT.HOOK #hdhook ],
					MODIFIED #hmodif ] >,
		               COMPS #spcomps ] ],
		   CONT.HOOK #hook ],
           MODIFIED #modif ],
    C-CONT [ HOOK #hook, RELS <! !>, HCONS <! !>, ICONS <! !> ] ].





;;;

sans-det-token-head-spec-phrase := ...
  [ STEM #stem,
    SYNSEM [ LOCAL ],
    ARGS < sign & [  ] ]

;basic-binary-phrase := phrase &
;  [ SYNSEM.LOCAL.CONT [ RELS [ LIST #first,
;			       LAST #last ],
;			HCONS [ LIST #scfirst,
;				LAST #sclast ],
;			ICONS [ LIST #icfirst,
;				LAST #iclast ] ],
;    C-CONT [ RELS [ LIST #middle2,
;		    LAST #last ],
;	     HCONS [ LIST #scmiddle2,
;		     LAST #sclast ],
;	     ICONS [ LIST #icmiddle2,
;		     LAST #iclast ] ],
;    ARGS < sign & [ SYNSEM.LOCAL local &
;				 [ CONT [ RELS [ LIST #first,
;						 LAST #middle1 ],
;					  HCONS [ LIST #scfirst,
;						  LAST #scmiddle1 ],
;					  ICONS [ LIST #icfirst,
;						  LAST #icmiddle1 ] ] ] ],
;	   sign & [ SYNSEM.LOCAL local &
;				 [ CONT [ RELS [ LIST #middle1,
;						 LAST #middle2 ],
;					  HCONS [ LIST #scmiddle1,
;						  LAST #scmiddle2 ],
;					  ICONS [ LIST #icmiddle1,
;						  LAST #icmiddle2 ] ] ] ] > ].




;;;

basic-unary-phrase := phrase &
  [ STEM #stem,
    SYNSEM [ L-PERIPH #lperiph,
	     R-PERIPH #rperiph,
	     LOCAL [ CAT.MKG #mkg,
		     CONT [ RELS [ LIST #first,
				   LAST #last ],
			    HCONS [ LIST #scfirst,
				    LAST #sclast ],
			    ICONS [ LIST #icfirst,
				    LAST #iclast ] ] ] ],
    C-CONT [ RELS [ LIST #middle,
		    LAST #last ],
	     HCONS [ LIST #scmiddle,
		     LAST #sclast ],
	     ICONS [ LIST #icmiddle,
		     LAST #iclast ] ],
    ARGS < sign & [ STEM #stem,
		    SYNSEM [ L-PERIPH #lperiph,
			     R-PERIPH #rperiph,
			     LOCAL local &
			      [ CAT.MKG #mkg,
				CONT [ RELS [ LIST #first,
					      LAST #middle ],
				       HCONS [ LIST #scfirst,
					       LAST #scmiddle ],
				       ICONS [ LIST #icfirst,
					       LAST #icmiddle ] ] ] ] ] > ].

unary-phrase := basic-unary-phrase &
  [ INFLECTED infl-satisfied,
    ARGS < [ INFLECTED infl-satisfied ] > ].


;;;
